30.11 Perjantai
-------------

60 min: Tutustuttu harjoitustyön vaatimuksiin,
        rakennettu pohja aihemäärittelylle ja aloitettu tuntikirjanpito.
        
1.12 Lauantai
------------

3h: Asennettu tarvittavat ohjelmistot Git:n käyttöön ja tutustuttu GitHubiin.

15 min: Luokkakaavion eka versio valmis

60 min: Id-tyyppisen LExpression JUnit-testit laadittu, sekä koodia kirjoitettu
        sen verran, että ID-testit läpäisty. Application-tyyppisen LExpression
        JUnit-testit laadittu, sekä koodia kirjoitettu sen verran, että
        ID-testit läpäisty.

2.12 Sunnuntai
--------------

~1h: toString-metodien lisäys hoidettu, L-lauseiden arvon helppoa tulostusta
     varten REPL:in print()-metodissa. Lambda-tyyppisten lauseiden JUnit-testit
     ja koodi hoidettu: testit läpäisty.

~2h: Lisätty Pair-LExp, JUnit-testattu, aloitettu Parserin rakentaminen, ja
     ekat parser-testit läpäisty. Lisää LExp-testejä on tarkoitus tuottaa stten
     vaiheessa kun toimiva read()/parse on valmis ja tähänastiset lauseet on
     testattu 'in vivo'.

3.12 Maanantai
--------------

~1h: Luotu testiohjelma, joka testaa tällä hetkellä Parseria. REPL siis
     sisältää yksinkertaisen read()-vaiheen, ja Parser sisältää tällä hetkellä
     käyttäjän syötteet karkeasti LExp-muotoon parsaavan toiminnallisuuden.
     
4.12 Tiistai
------------

~30 min: ensimmäinen testiREPL valmis, Luotu uusi L-lausetyyppi - error.
         Luokkakaaviota ei tältä osin vielä päivitetty...
~10 min: refaktoroitu testiREPLIä.

7.12 Perjantai:
-------------

~40 min: reader() ja Parser ovat nyt selkeästi erotettu toisistaan, ja niillä
         on selkeästi omat tehtävät. Ainoa overlap näiden välillä on siinä,
         koska reader() tietää, että syötteen luku tulee lopettaa... Tätä
         varten readerin täytyy tehdä pikkuriikkisen parserointia itse. Muuten
         kaiken syötteiden parseroinnin hoitaa Parser-luokka.
         Muutama uusi ParserTesti toteutettu ja läpäisty.
         
~1h:     lisätty uusia "arvotyyppisiä" L-lauseita, rakennettu parseria. Parseri
		 on tosin vielä hyvin kaoottisesti organisoitu, mutta nyt se kuitenkin
		 osaa jo erotella joitakin käyttäjän syöttämiä L-lauseita ja niiden
		 perusteella luoda sopivia arvoja evaluoitavaksi.
		 Evaluaattori on vieläkin käytännössä olematon.
		 
		 
8.12 Lauantai:
--------------
~6h:     Reippaalla kädellä refaktoroitu Parseria, Muutettu muutamien
		 LExp-toimitaa.
         
9.12 Sunnuntai:
---------------
~5h:     Lisää refaktorointia ja Parserin rakennusta. Parseri jaettu useampaan
         pienempään osaan.
         Myös mm. Pair-tyyppien toString() metodi toimii tässä versiossa
         siten kuten listoja ja pareja tulisi Scheme-tulkilla näyttää.
         Luokkakaaviot menevät melko lailla uusiksi ensi viikon aikana,
         ja todennäköisesti myös parseria joutuu vielä melko lailla hiomaan.
         Se on vain tällä hetkellä täynnä kaikenlaista turhaa ja kömpelöä.
         Olisi pitänyt rakentaa heti aluksi tuo WordParser-koodi, koska se
         helpottaa huomattavasti LISP/Sheme-lauseiden manipuloimista...
         Parseri osaa tällä hetkellä parseroida atomilauseita, sekä
         lambda-lauseita.
         
 TODO
 ----
 päivitä luokkakaavio vastaamaan nykytilannetta
 Luo Environmentille luuranko
 Mieti tarvitaanko erikseen Bool-tyyppiä, mikäli kuitenkin kaikki mahdolliset
 "nil":stä tai "#f":stä poikkeavat arvot ovat automaattisesti "True"...
 Pitäisikö osa parseri rakentaa kokonaan uusiksi? Tätä voinee pohtia...